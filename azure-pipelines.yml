resources:
- repo: self
trigger:
  batch: true
  branches:
    include:
    - '*'
jobs:
- job: Tox
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
        tox_env: 'py36'
      Python37:
        python.version: '3.7'
        tox_env: 'py37'
      Python38:
        python.version: '3.8'
        tox_env: 'py38'
      Python39:
        python.version: '3.9'
        tox_env: 'py39'
      Python310:
        python.version: '3.10'
        tox_env: 'py310'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python $(python.version)'
    inputs:
      versionSpec: '$(python.version)'
  - task: Bash@3
    displayName: 'Run Tox'
    env:
      TOXENV: $(tox_env)
    inputs:
      targetType: 'filePath'
      filePath: scripts/ci/run_tox.sh

- job: ExtractMetadata
  displayName: 'Extract Metadata'
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: Bash@3
    displayName: 'Extract Version'
    inputs:
      targetType: 'filePath'
      filePath: scripts/ci/extract_version.sh

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: metadata'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: metadata

- job: BuildPythonWheel
  displayName: 'Build Python Wheel'

  dependsOn: ExtractMetadata
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.9'
    inputs:
      versionSpec: 3.9

  - task: Bash@3
    displayName: 'Run Wheel Build Script'
    inputs:
      targetType: 'filePath'
      filePath: scripts/ci/build.sh

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Artifact: pypi'
    inputs:
      TargetPath: $(Build.ArtifactStagingDirectory)
      ArtifactName: pypi
